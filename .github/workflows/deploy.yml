name: Deploy AWS Lambda Infra & Code

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    env:
      # AWS credentials
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

      # Terraform variables
      TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_lambda_function_name: bottleart-backend
      TF_VAR_s3_bucket_name: bottleart-lambda-layers
      TF_VAR_sns_topic_name: bottleart-sns
      TF_VAR_sqs_queue_name: bottleart-queue

    steps:
      # ----------------------------
      # Checkout repository
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------
      # Setup Python 3.10
      # ----------------------------
      - name: Setup Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # ----------------------------
      # Setup Terraform
      # ----------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      # ----------------------------
      # Terraform Apply (Infra Only)
      # ----------------------------
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      # ----------------------------
      # Check if requirements.txt changed
      # ----------------------------
      - name: Check if requirements.txt changed
        id: layer_check
        run: |
          CHANGED_FILES=$(git diff --name-only ${{ github.sha }} ${{ github.sha }}^)
          echo "Changed files: $CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q "requirements.txt"; then
            echo "layer_changed=true" >> $GITHUB_ENV
          else
            echo "layer_changed=false" >> $GITHUB_ENV

      # ----------------------------
      # Build Lambda Layer (if needed)
      # ----------------------------
      - name: Build Lambda Layer
        if: env.layer_changed == 'true'
        run: |
          chmod +x .deploy/build_layer.sh
          ./.deploy/build_layer.sh

      # ----------------------------
      # Publish Lambda Layer (if changed) and cleanup
      # ----------------------------
      - name: Publish Lambda Layer
        if: env.layer_changed == 'true'
        run: |
          LAYER_ZIP=".deploy/layer.zip"
          LAYER_NAME=${{ env.TF_VAR_lambda_function_name }}-layer
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --zip-file fileb://$LAYER_ZIP \
            --compatible-runtimes python3.10 \
            --query LayerVersionArn --output text)
          echo "LAYER_ARN=$LAYER_ARN" >> $GITHUB_ENV

          # Attach new layer to Lambda and update env variables
          aws lambda update-function-configuration \
            --function-name ${{ env.TF_VAR_lambda_function_name }} \
            --layers $LAYER_ARN \
            --environment "Variables={
              DB_USER=${{ secrets.DB_USER }},
              DB_PASSWORD=${{ secrets.DB_PASSWORD }},
              DB_HOST=${{ secrets.DB_HOST }},
              DB_PORT=${{ secrets.DB_PORT }},
              DB_NAME=${{ secrets.DB_NAME }},
              QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }},
              QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }},
              QDRANT_URL=${{ secrets.QDRANT_URL }},
              QDRANT_SPARSE_NAME=${{ secrets.QDRANT_SPARSE_NAME }},
              JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},
              AWS_SNS_TOPIC_ARN=${{ secrets.AWS_SNS_TOPIC_ARN }},
              AWS_SQS_QUEUE_ARN=${{ secrets.AWS_SQS_QUEUE_ARN }}
            }"

          # Cleanup local layer zip
          rm -f $LAYER_ZIP

      # ----------------------------
      # Zip Lambda Code
      # ----------------------------
      - name: Zip Lambda Code
        run: |
          chmod +x .deploy/zip_code.sh
          ./.deploy/zip_code.sh

      # ----------------------------
      # Update Lambda Function Code (direct upload)
      # ----------------------------
      - name: Update Lambda Function Code
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.TF_VAR_lambda_function_name }} \
            --zip-file fileb://.deploy/code.zip \
            --publish

      # ----------------------------
      # Update Lambda Environment Variables (always)
      # ----------------------------
      - name: Update Lambda Environment Variables
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ env.TF_VAR_lambda_function_name }} \
            --environment "Variables={
              DB_USER=${{ secrets.DB_USER }},
              DB_PASSWORD=${{ secrets.DB_PASSWORD }},
              DB_HOST=${{ secrets.DB_HOST }},
              DB_PORT=${{ secrets.DB_PORT }},
              DB_NAME=${{ secrets.DB_NAME }},
              QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }},
              QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }},
              QDRANT_URL=${{ secrets.QDRANT_URL }},
              QDRANT_SPARSE_NAME=${{ secrets.QDRANT_SPARSE_NAME }},
              JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }},
              AWS_SNS_TOPIC_ARN=${{ secrets.AWS_SNS_TOPIC_ARN }},
              AWS_SQS_QUEUE_ARN=${{ secrets.AWS_SQS_QUEUE_ARN }}
            }"

      # ----------------------------
      # Show API Gateway URL
      # ----------------------------
      - name: Show API Gateway URL
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          echo "âœ… Deployment complete! API URL: $API_URL"
