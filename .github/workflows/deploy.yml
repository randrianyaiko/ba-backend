name: Deploy AWS Lambda Infra

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

      TF_VAR_db_user: ${{ secrets.DB_USER }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_db_host: ${{ secrets.DB_HOST }}
      TF_VAR_db_port: ${{ secrets.DB_PORT }}
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_qdrant_api_key: ${{ secrets.QDRANT_API_KEY }}
      TF_VAR_qdrant_url: ${{ secrets.QDRANT_URL }}
      TF_VAR_qdrant_collection_name: ${{ secrets.QDRANT_COLLECTION_NAME }}
      TF_VAR_qdrant_sparse_name: ${{ secrets.QDRANT_SPARSE_NAME }}
      TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}

      TF_VAR_lambda_function_name: bottleart-backend
      TF_VAR_lambda_handler: main.handler
      TF_VAR_lambda_runtime: python3.11
      TF_VAR_lambda_zip_dependency_path: .deploy/layer.zip
      TF_VAR_s3_bucket_name: bottleart-lambda-layers
      TF_VAR_sns_topic_name: bottleart-sns
      TF_VAR_sqs_queue_name: bottleart-queue

    steps:
      # ----------------------------
      # Checkout repository
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------
      # Build Lambda layer
      # ----------------------------
      - name: Build Lambda layer
        run: |
          chmod +x .deploy/build_layer.sh
          ./.deploy/build_layer.sh

      # ----------------------------
      # Zip Lambda code
      # ----------------------------
      - name: Zip Lambda code
        run: |
          chmod +x .deploy/zip_code.sh
          ./.deploy/zip_code.sh

      # ----------------------------
      # Setup Terraform
      # ----------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      # ----------------------------
      # Terraform Apply (Infrastructure)
      # ----------------------------
      - name: Terraform Apply (Infrastructure)
        working-directory: terraform
        run: terraform apply -auto-approve

      # ----------------------------
      # Upload Lambda code to S3
      # ----------------------------
      - name: Upload Lambda code to S3
        run: |
          VERSION="v$(date +%Y%m%d%H%M%S)"
          ZIP_PATH=".deploy/code.zip"
          S3_KEY="lambda/${{ env.TF_VAR_lambda_function_name }}-${VERSION}.zip"

          echo "Uploading Lambda code to s3://${{ env.TF_VAR_s3_bucket_name }}/${S3_KEY}"
          aws s3 cp "$ZIP_PATH" "s3://${{ env.TF_VAR_s3_bucket_name }}/${S3_KEY}"

          echo "TF_VAR_lambda_code_s3_bucket=${{ env.TF_VAR_s3_bucket_name }}" >> $GITHUB_ENV
          echo "TF_VAR_lambda_code_s3_key=${S3_KEY}" >> $GITHUB_ENV
          echo "TF_VAR_lambda_code_version=${VERSION}" >> $GITHUB_ENV

      # ----------------------------
      # Update Lambda Function Code
      # ----------------------------
      - name: Update Lambda Function Code
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -var="lambda_code_s3_bucket=${TF_VAR_lambda_code_s3_bucket}" \
            -var="lambda_code_s3_key=${TF_VAR_lambda_code_s3_key}" \
            -var="lambda_code_version=${TF_VAR_lambda_code_version}"

      # ----------------------------
      # Clean up old Lambda layers (keep last 5)
      # ----------------------------
      - name: Clean up old Lambda layer ZIPs
        run: |
          BUCKET=${{ env.TF_VAR_s3_bucket_name }}
          PREFIX="layers/${{ env.TF_VAR_lambda_function_name }}-layer-"

          echo "Cleaning old Lambda layer files in s3://$BUCKET/$PREFIX"
          
          # List layer files sorted by LastModified descending
          LAYER_KEYS=$(aws s3api list-objects-v2 \
            --bucket $BUCKET \
            --prefix "layers/" \
            --query "sort_by(Contents,&LastModified)[].Key" \
            --output text)

          # Keep only the latest 5 files
          COUNT=0
          for KEY in $LAYER_KEYS; do
            COUNT=$((COUNT+1))
            if [ $COUNT -le $(($# < 5 ? $# : 5)) ]; then
              continue
            fi
            echo "Deleting old layer: $KEY"
            aws s3 rm "s3://$BUCKET/$KEY"
          done

      # ----------------------------
      # Show API Gateway URL
      # ----------------------------
      - name: Show API Gateway URL
        run: |
          API_URL=$(terraform output -raw api_gateway_url)
          echo "âœ… Deployment complete! API URL: $API_URL"
