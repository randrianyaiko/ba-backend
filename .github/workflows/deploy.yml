name: Deploy AWS Lambda Infra

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Infra & Lambda
    runs-on: ubuntu-latest
    environment: production

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

      # Terraform variables
      TF_VAR_db_user: ${{ secrets.DB_USER }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_db_host: ${{ secrets.DB_HOST }}
      TF_VAR_db_port: ${{ secrets.DB_PORT }}
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_qdrant_api_key: ${{ secrets.QDRANT_API_KEY }}
      TF_VAR_qdrant_url: ${{ secrets.QDRANT_URL }}
      TF_VAR_qdrant_collection_name: ${{ secrets.QDRANT_COLLECTION_NAME }}
      TF_VAR_qdrant_sparse_name: ${{ secrets.QDRANT_SPARSE_NAME }}
      TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}

      TF_VAR_lambda_function_name: bottleart-backend
      TF_VAR_lambda_handler: main.handler
      TF_VAR_lambda_runtime: python3.11
      TF_VAR_lambda_code_path: .deploy/code.zip
      TF_VAR_lambda_zip_dependency_path: .deploy/layer.zip
      TF_VAR_s3_bucket_name: bottleart-lambda-layers
      TF_VAR_sns_topic_name: bottleart-sns
      TF_VAR_sqs_queue_name: bottleart-queue

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Lambda layer
        run: |
          chmod +x .deploy/build_layer.sh
          ./.deploy/build_layer.sh

      - name: Zip Lambda code
        run: |
          chmod +x .deploy/zip_code.sh
          ./.deploy/zip_code.sh

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      - name: Terraform Init (remote state)
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: terraform
        run: |
          echo "LAYER_BUCKET=$(terraform output -raw lambda_layer_bucket)" >> $GITHUB_ENV
          echo "API_URL=$(terraform output -raw api_gateway_url)" >> $GITHUB_ENV

      - name: Clean old layer zips in S3
        run: |
          echo "üßπ Cleaning old layers in $LAYER_BUCKET"
          aws s3 rm s3://$LAYER_BUCKET/layers/ --recursive || echo "No old layer files to remove."

      - name: Upload new layer.zip to S3
        run: |
          echo "‚¨ÜÔ∏è Uploading new layer to $LAYER_BUCKET"
          aws s3 cp .deploy/layer.zip s3://$LAYER_BUCKET/layers/${{ env.TF_VAR_lambda_function_name }}-layer.zip
