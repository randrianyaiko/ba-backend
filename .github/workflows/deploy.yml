name: Deploy AWS Lambda

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: bottleartbackendapp

    env:
      # Terraform variables (from GitHub secrets)
      TF_VAR_db_user: ${{ secrets.DB_USER }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_db_host: ${{ secrets.DB_HOST }}
      TF_VAR_db_port: ${{ secrets.DB_PORT }}
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_qdrant_api_key: ${{ secrets.QDRANT_API_KEY }}
      TF_VAR_qdrant_url: ${{ secrets.QDRANT_URL }}
      TF_VAR_qdrant_collection_name: ${{ secrets.QDRANT_COLLECTION_NAME }}
      TF_VAR_qdrant_sparse_name: ${{ secrets.QDRANT_SPARSE_NAME }}
      TF_VAR_jwt_secret_key: ${{ secrets.JWT_SECRET_KEY }}
      TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      TF_VAR_lambda_function_name: bottleart-backend
      TF_VAR_s3_bucket_name: bottleart-lambda-layers
      
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      # ----------------------------
      # Checkout repository
      # ----------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------
      # Build Lambda layer
      # ----------------------------
      - name: Build Lambda Layer
        run: chmod +x .deploy/build_layer.sh && ./.deploy/build_layer.sh

      # ----------------------------
      # Zip Lambda function code
      # ----------------------------
      - name: Zip Lambda Code
        run: chmod +x .deploy/zip_code.sh && ./.deploy/zip_code.sh

      # ----------------------------
      # Setup Terraform
      # ----------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.2

      # ----------------------------
      # Terraform Init
      # ----------------------------
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      # ----------------------------
      # Import existing resources (safe skip)
      # ----------------------------
      - name: Import existing resources if needed
        working-directory: ./terraform
        run: |
          echo "🔍 Checking for existing resources..."
          terraform import aws_s3_bucket.lambda_layers ${TF_VAR_s3_bucket_name} || echo "✅ S3 bucket already managed or new."
          terraform import aws_lambda_function.this ${TF_VAR_lambda_function_name} || echo "✅ Lambda already managed or new."
          terraform import aws_iam_role.lambda_exec ${TF_VAR_lambda_function_name}-exec || echo "✅ IAM Role already managed or new."
          terraform import aws_sns_topic.this ${TF_VAR_lambda_function_name}-sns || echo "✅ SNS topic already managed or new."
          terraform import aws_sqs_queue.this ${TF_VAR_lambda_function_name}-queue || echo "✅ SQS queue already managed or new."

      # ----------------------------
      # Terraform Validate
      # ----------------------------
      - name: Validate Terraform configuration
        working-directory: ./terraform
        run: terraform validate

      # ----------------------------
      # Terraform Plan
      # ----------------------------
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      # ----------------------------
      # Terraform Apply
      # ----------------------------
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      # ----------------------------
      # Get Lambda Layer S3 bucket name from Terraform output
      # ----------------------------
      - name: Get S3 bucket name from Terraform
        id: tf_output
        working-directory: ./terraform
        run: echo "BUCKET_NAME=$(terraform output -raw lambda_layer_bucket)" >> $GITHUB_ENV

      # ----------------------------
      # Clean old Lambda layer ZIPs from S3
      # ----------------------------
      - name: Clean old S3 Layer files
        run: |
          echo "🧹 Cleaning up old Lambda layer zips from $BUCKET_NAME/layers/"
          aws s3 rm s3://$BUCKET_NAME/layers/ --recursive || echo "No old layers found to delete."

